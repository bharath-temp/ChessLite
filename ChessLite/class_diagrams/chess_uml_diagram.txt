@startuml
left to right direction

enum PieceColor{
    BLACK
    WHITE
}

enum PlayerType{
    HUMAN
    AI
}

abstract class Piece {
    - _color : PieceColor
    - _current_row : int
    - _current_col : int
    + __init__(color: PieceColor, current_row: int, current_col: int)
    + color() : PieceColor {property getter}
    + row() : int {property getter}
    + row(dest_row: int) : None {property setter}
    + column() : int {property getter}
    + column(dest_col: int) : None {property setter}
    # _on_position_changed() : None
    - set_position(dest_row: int, dest_col: int) : None
    # in_bound_check(row: int, col: int) : bool
    # _is_valid_move(dest_row: int, dest_col: int) : bool
}

class MovedPieceMixin {
    - _moved : bool
    + moved() : bool {property}
    + moved(has_moved: bool) : None {property setter}
    # _on_position_changed() : None
}

class PieceFactory {
    - __piece_registry : dict
    + {static} create_piece(piece_type: PieceType, color: PieceColor, row: int, col: int) : Piece
    + {class} register_piece(piece_type: PieceType) : function
}

package "Pieces" {
    class Pawn {
        - __init__(color: PieceColor, current_row: int, current_col: int)
        # _can_promote() : bool
        # _is_valid_pawn_move(dest_row: int, dest_col: int) : bool
    }
    
    class Rook {
        - __init__(color: PieceColor, current_row: int, current_col: int)
        # _is_valid_rook_move(dest_row: int, dest_col: int) : bool
    }
    
    class Knight {
        - __init__(color: PieceColor, current_row: int, current_col: int)
        # _is_valid_knight_move(dest_row: int, dest_col: int) : bool
    }
    
    class Bishop {
        - __init__(color: PieceColor, current_row: int, current_col: int)
        # _is_valid_bishop_move(dest_row: int, dest_col: int) : bool
    }
    
    class King {
        - __init__(color: PieceColor, current_row: int, current_col: int)
        # _is_valid_king_move(dest_row: int, dest_col: int) : bool
    }
    
    class Queen {
        - __init__(color: PieceColor, current_row: int, current_col: int)
        # _is_valid_queen_move(dest_row: int, dest_col: int) : bool
    }
}

Piece <|-- Pawn
Piece <|-- Rook
Piece <|-- Knight
Piece <|-- Bishop
Piece <|-- King
Piece <|-- Queen

MovedPieceMixin <|-- King
MovedPieceMixin <|-- Pawn
MovedPieceMixin <|-- Rook

PieceFactory ..> Piece : "creates >"
Pawn ..> PieceFactory : "registered with"
Rook ..> PieceFactory : "registered with"
Knight ..> PieceFactory : "registered with"
Bishop ..> PieceFactory : "registered with"
King ..> PieceFactory : "registered with"
Queen ..> PieceFactory : "registered with"

abstract class Player {
    - _player_type : PlayerType
    - _color : PieceColor
    - _name : string
    + __init__(player_type: PlayerType, color: PieceColor, name: string)
    + player_type() : PlayerType {property getter}
    + color() : PieceColor {property getter}
    + name() : string {property getter}
}

package "Players" {
    class HumanPlayer {
        - __init__(color: PieceColor, name: string)
        + {static} create_human_player(color: PieceColor, name: string)
    }
    
    class AIPlayer {
        - __init__(color: PieceColor, name: string)
        + {static} create_ai_player(color: PieceColor, name: string)
    }
}

Player <|-- HumanPlayer
Player <|-- AIPlayer
@enduml