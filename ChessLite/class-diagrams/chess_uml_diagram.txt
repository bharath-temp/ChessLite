@startuml
left to right direction

enum PieceColor{
    BLACK
    WHITE
}

enum PlayerType{
    HUMAN
    AI
}

abstract class Piece {
    # _color : PieceColor
    # _current_row : int
    # _current_col : int
    - __init__(color: PieceColor, current_row: int, current_col: int)
    # out_of_bound_check(row: int, col: int) : bool
    # _is_valid_move(dest_row: int, dest_col: int) : bool
    + {abstract} get_color() : PieceColor
    + {abstract} get_row() : int
    + {abstract} get_col() : int
    + {abstract} set_row() : None
    + {abstract} set_col() : None
}

class Pawn {
    + has_moved : bool
    - __init__(color: PieceColor, current_row: int, current_col: int)
    + {static} create_pawn(color: PieceColor, current_row: int, current_col: int)
    + set_has_moved() : None
    # _can_promote() : bool
    # _is_valid_pawn_move(dest_row: int, dest_col: int) : bool
}

class Rook {
    + has_moved : bool
    - __init__(color: PieceColor, current_row: int, current_col: int)
    + {static} create_rook(color: PieceColor, current_row: int, current_col: int)
    + set_has_moved() : None
    # _is_valid_rook_move(dest_row: int, dest_col: int) : bool
}

class Knight {
    - __init__(color: PieceColor, current_row: int, current_col: int)
    + {static} create_knight(color: PieceColor, current_row: int, current_col: int)
    # _is_valid_knight_move(dest_row: int, dest_col: int) : bool
}

class Bishop {
    - __init__(color: PieceColor, current_row: int, current_col: int)
    + {static} create_bishop(color: PieceColor, current_row: int, current_col: int)
    # _is_valid_bishop_move(dest_row: int, dest_col: int) : bool
}

class King {
    + has_moved : bool
    + has_castled : bool
    - __init__(color: PieceColor, current_row: int, current_col: int)
    + {static} create_king(color: PieceColor, current_row: int, current_col: int)
    + set_has_moved() : None
    # _is_valid_king_move(dest_row: int, dest_col: int) : bool
}

class Queen {
    - __init__(color: PieceColor, current_row: int, current_col: int)
    + {static} create_queen(color: PieceColor, current_row: int, current_col: int)
    # _is_valid_queen_move(dest_row: int, dest_col: int) : bool
}

Piece <|-- Pawn
Piece <|-- Rook
Piece <|-- Knight
Piece <|-- Bishop
Piece <|-- King
Piece <|-- Queen

abstract class Player {
    # _player_type : PlayerType
    # _color : PieceColor
    # _name : string
    - __init__(player_type: PlayerType, color: PieceColor, name: string)
    + {abstract} get_player_type() : PlayerType
    + {abstract} get_color() : PieceColor
    + {abstract} get_name() : string
}

class HumanPlayer {
    - __init__(player_type: PlayerType, color: PieceColor, name: string)
    + {static} create_human_player(color: PieceColor, name: string)
}

class AIPlayer {
    - __init__(player_type: PlayerType, color: PieceColor, name: string)
    + {static} create_ai_player(color: PieceColor, name: string)
}

Player <|-- HumanPlayer
Player <|-- AIPlayer
@enduml